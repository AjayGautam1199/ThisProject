static const unsigned char image_battery_17_bits[] U8X8_PROGMEM = {
0x00,0x00,0x00,0xf0,0xff,0x7f,0x08,0x00,0x80,0x08,0x00,0xb0,0x0e,0x00,
0xb0,0x01,0x00,0xb0,0x01,0x00,0xb0,0x01,0x00,0xb0,0x01,0x00,0xb0,0x01,
0x00,0xb0,0x0e,0x00,0xb0,0x08,0x00,0xb0,0x08,0x00,0x80,0xf0,0xff,0x7f,
0x00,0x00,0x00,0x00,0x00,0x00};
static const unsigned char image_battery_33_bits[] U8X8_PROGMEM = {
0x00,0x00,0x00,0xf0,0xff,0x7f,0x08,0x00,0x80,0x08,0x00,0xb6,0x0e,0x00,
0xb6,0x01,0x00,0xb6,0x01,0x00,0xb6,0x01,0x00,0xb6,0x01,0x00,0xb6,0x01,
0x00,0xb6,0x0e,0x00,0xb6,0x08,0x00,0xb6,0x08,0x00,0x80,0xf0,0xff,0x7f,
0x00,0x00,0x00,0x00,0x00,0x00};
static const unsigned char image_battery_50_bits[] U8X8_PROGMEM = {
0x00,0x00,0x00,0xf0,0xff,0x7f,0x08,0x00,0x80,0x08,0xc0,0xb6,0x0e,0xc0,
0xb6,0x01,0xc0,0xb6,0x01,0xc0,0xb6,0x01,0xc0,0xb6,0x01,0xc0,0xb6,0x01,
0xc0,0xb6,0x0e,0xc0,0xb6,0x08,0xc0,0xb6,0x08,0x00,0x80,0xf0,0xff,0x7f,
0x00,0x00,0x00,0x00,0x00,0x00};
static const unsigned char image_battery_67_bits[] U8X8_PROGMEM = {
0x00,0x00,0x00,0xf0,0xff,0x7f,0x08,0x00,0x80,0x08,0xd8,0xb6,0x0e,0xd8,
0xb6,0x01,0xd8,0xb6,0x01,0xd8,0xb6,0x01,0xd8,0xb6,0x01,0xd8,0xb6,0x01,
0xd8,0xb6,0x0e,0xd8,0xb6,0x08,0xd8,0xb6,0x08,0x00,0x80,0xf0,0xff,0x7f,
0x00,0x00,0x00,0x00,0x00,0x00};
static const unsigned char image_battery_83_bits[] U8X8_PROGMEM = {
0x00,0x00,0x00,0xf0,0xff,0x7f,0x08,0x00,0x80,0x08,0xdb,0xb6,0x0e,0xdb,
0xb6,0x01,0xdb,0xb6,0x01,0xdb,0xb6,0x01,0xdb,0xb6,0x01,0xdb,0xb6,0x01,
0xdb,0xb6,0x0e,0xdb,0xb6,0x08,0xdb,0xb6,0x08,0x00,0x80,0xf0,0xff,0x7f,
0x00,0x00,0x00,0x00,0x00,0x00};
static const unsigned char image_battery_100_bits[] U8X8_PROGMEM = {
0x00,0x00,0x00,0xf0,0xff,0x7f,0x08,0x00,0x80,0x68,0xdb,0xb6,0x6e,0xdb,
0xb6,0x61,0xdb,0xb6,0x61,0xdb,0xb6,0x61,0xdb,0xb6,0x61,0xdb,0xb6,0x61,
0xdb,0xb6,0x6e,0xdb,0xb6,0x68,0xdb,0xb6,0x08,0x00,0x80,0xf0,0xff,0x7f,
0x00,0x00,0x00,0x00,0x00,0x00};
static const unsigned char image_battery_charging_bits[] U8X8_PROGMEM = {
0x00,0x40,0x00,0xf0,0x27,0x7f,0x08,0x30,0x80,0x08,0x10,0x80,0x0e,0x18,0x80,
0x01,0x0c,0x80,0x01,0xfc,0x81,0x01,0xfe,0x80,0x01,0xc0,0x80,0x01,0x60,0x80,
0x0e,0x20,0x80,0x08,0x30,0x80,0x08,0x10,0x80,0xf0,0xcb,0x7f,0x00,0x08,0x00,
0x00,0x00,0x00};

float batteryVoltage; // Variable to store the measured battery voltage

void displayBatteryStatus(float voltage) {
    // Define voltage thresholds
    float minVoltage = 3.0; // Minimum battery voltage
    float maxVoltage = 4.2; // Maximum battery voltage

    // Determine the battery percentage
    float batteryPercentage = ((voltage - minVoltage) / (maxVoltage - minVoltage)) * 100;

    // Clamp the battery percentage between 0 and 100
    if (batteryPercentage < 0) batteryPercentage = 0;
    if (batteryPercentage > 100) batteryPercentage = 100;

    // Determine which bitmap to display
    if (batteryPercentage <= 17) {
        u8g2.drawXBMP(103, 0, 24, 16, image_battery_17_bits);
    } else if (batteryPercentage <= 33) {
        u8g2.drawXBMP(103, 0, 24, 16, image_battery_33_bits);
    } else if (batteryPercentage <= 50) {
        u8g2.drawXBMP(103, 0, 24, 16, image_battery_50_bits);
    } else if (batteryPercentage <= 67) {
        u8g2.drawXBMP(103, 0, 24, 16, image_battery_67_bits);
    } else if (batteryPercentage <= 83) {
        u8g2.drawXBMP(103, 0, 24, 16, image_battery_83_bits);
    } else if (batteryPercentage <= 100) {
        u8g2.drawXBMP(103, 0, 24, 16, image_battery_100_bits);
    }

    // Optional: Check for charging state
    if (isCharging()) { // Implement isCharging() to detect charging
        u8g2.drawXBMP(103, 0, 24, 16, image_battery_charging_bits);
    }
}

// Example usage
void loop() {
    // Simulate reading the battery voltage
    batteryVoltage = analogRead(A0) * (5.0 / 1023.0); // Example for ADC

    // Display the battery status
    displayBatteryStatus(batteryVoltage);

    // delay(1000); // Update every second
}
